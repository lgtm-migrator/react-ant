{"version":3,"sources":["vowel.js","App.js","serviceWorker.js","index.js","background.jpeg","Screenshot from 2018-12-18 11-55-13.png"],"names":["isVowel","x","s","split","result","i","length","push","react_default","a","createElement","main_default","highlightClassName","searchWords","textToHighlight","SubMenu","Menu","App","state","current","isHide","spanValue","count","pageText","imageList","id","img","image","Image","image1","Image1","handleClick","e","console","log","_this","setState","key","listView","gridView","about","reverse","more","info","message","text","document","getElementById","textContent","_this2","this","react","menu","selectedKeys","mode","title","className","icon","type","ItemGroup","Item","onClick","row","map","index","col","span","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wTAgCeA,MA5Bf,SAAiBC,GAGf,IAFA,IAAIC,EAAID,EAAEE,MAAM,IACZC,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAEI,OAAQD,IAEjB,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IACO,MAATH,EAAEG,IAEFD,EAAOG,KAAKL,EAAEG,IAGlB,OACEG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,mBAAmB,QACnBC,YAAaT,EACbU,gBAAiBb,KClBfc,EAAYC,IAAZD,QA+GOE,6MA5GbC,MAAQ,CACNC,QAAS,WACTC,QAAQ,EACRC,UAAW,GACXC,MAAO,EACPC,SAAU,GACVC,UAAW,CACT,CAAEC,GAAI,EAAGC,IAAKC,KACd,CAAEF,GAAI,EAAGC,IAAKE,KACd,CAAEH,GAAI,EAAGC,IAAKG,KACd,CAAEJ,GAAI,EAAGC,IAAKI,SASlBC,YAAc,SAAAC,GACZC,QAAQC,IAAI,SAAUF,GACtBG,EAAKC,SAAS,CACZjB,QAASa,EAAEK,SAIfC,SAAW,WACTH,EAAKC,SAAS,CAAEf,UAAW,QAE7BkB,SAAW,WACTJ,EAAKC,SAAS,CAAEf,UAAW,OAG7BmB,MAAQ,WACNL,EAAKC,SAAS,CAAEd,MAAOa,EAAKjB,MAAMI,MAAQ,IAC1Ca,EAAKC,SAAS,CACZZ,UAAWW,EAAKjB,MAAMM,UAAUiB,eAGpCC,KAAO,WACLP,EAAKC,SAAS,CAAEd,MAAO,OAEzBqB,KAAO,WACLC,IAAQD,KAAK,mHA5Bb,IAAME,EAAOC,SAASC,eAAe,QAAQC,YAC7ChD,EAAQ6C,oCA8BD,IAAAI,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAACyC,EAAA,SAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAEEC,aAAc,CAACH,KAAKhC,MAAMC,SAC1BmC,KAAK,cACL9C,EAAAC,EAAAC,cAACK,EAAD,CACEwC,MACE/C,EAAAC,EAAAC,cAAA,QAAM8C,UAAU,yBAAhB,WAEEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,KAAK,WAGflD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKO,UAAN,KACEnD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,YAAYwB,QAASX,KAAKZ,UAAzC,aAGA9B,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,YAAYwB,QAASX,KAAKX,UAAzC,eAKJ/B,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,QAAQwB,QAASX,KAAKV,OAArC,SAGAhC,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,UAAUwB,QAASX,KAAKP,MAAvC,iBAGAnC,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,SAASwB,QAASX,KAAKP,MAAtC,SAEEnC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,KAAK,UAEblD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,UAAUwB,QAASX,KAAKP,MACrCnC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,KAAK,SADb,WAIAlD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKQ,KAAN,CAAWvB,IAAI,OAAOwB,QAASX,KAAKR,MAApC,OAEElC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,KAAK,WArCjB,kBAwCkBR,KAAKhC,MAAMI,MAC3Bd,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,kBACbhD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KACGZ,KAAKhC,MAAMM,UAAUuC,IAAI,SAACpC,EAAOqC,GAAR,OACxBxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CACET,UAAU,aACVU,KAAMjB,EAAK/B,MAAMG,UACjBgB,IAAK2B,GACLxD,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,cACbhD,EAAAC,EAAAC,cAAA,OAAKyD,IAAKxC,EAAMD,IAAK0C,IAAI,mBAlGzBC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAAS/B,SAASC,eAAe,SDyH3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.314fb40f.chunk.js","sourcesContent":["import React from \"react\";\nimport Highlighter from \"react-highlight-words\";\nimport \"./App.css\";\n\nfunction isVowel(x) {\n  var s = x.split(\"\");\n  var result = [];\n  for (var i = 0; i < s.length; i++) {\n    if (\n      s[i] === \"A\" ||\n      s[i] === \"E\" ||\n      s[i] === \"I\" ||\n      s[i] === \"O\" ||\n      s[i] === \"U\" ||\n      s[i] === \"a\" ||\n      s[i] === \"e\" ||\n      s[i] === \"i\" ||\n      s[i] === \"o\" ||\n      s[i] === \"u\"\n    ) {\n      result.push(s[i]);\n    }\n  }\n  return (\n    <Highlighter\n      highlightClassName=\"vowel\"\n      searchWords={result}\n      textToHighlight={x}\n    />\n  );\n}\n\nexport default isVowel;\n","import React, { Component, Fragment } from \"react\";\nimport { Menu, Icon, Row, Col, message } from \"antd\";\nimport \"./index.css\";\nimport image from \"./background.jpeg\";\nimport image1 from \"./background.jpeg\";\nimport Image from \"./Screenshot from 2018-12-18 11-55-13.png\";\nimport Image1 from \"./Screenshot from 2018-12-18 11-55-13.png\";\nimport isVowel from \"./vowel\";\n\nconst { SubMenu } = Menu;\n\nclass App extends Component {\n  state = {\n    current: \"timeline\",\n    isHide: true,\n    spanValue: 24,\n    count: 0,\n    pageText: \"\",\n    imageList: [\n      { id: 1, img: image },\n      { id: 2, img: Image },\n      { id: 3, img: image1 },\n      { id: 4, img: Image1 }\n    ]\n  };\n\n  componentDidMount() {\n    const text = document.getElementById(\"root\").textContent;\n    isVowel(text);\n  }\n\n  handleClick = e => {\n    console.log(\"click \", e);\n    this.setState({\n      current: e.key\n    });\n  };\n\n  listView = () => {\n    this.setState({ spanValue: 24 });\n  };\n  gridView = () => {\n    this.setState({ spanValue: 6 });\n  };\n\n  about = () => {\n    this.setState({ count: this.state.count + 1 });\n    this.setState({\n      imageList: this.state.imageList.reverse()\n    });\n  };\n  more = () => {\n    this.setState({ count: 0 });\n  };\n  info = () => {\n    message.info(\"Functionality not available\");\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Menu\n          // onClick={this.handleClick}\n          selectedKeys={[this.state.current]}\n          mode=\"horizontal\">\n          <SubMenu\n            title={\n              <span className=\"submenu-title-wrapper\">\n                Timeline\n                <Icon type=\"down\" />\n              </span>\n            }>\n            <Menu.ItemGroup>\n              <Menu.Item key=\"list view\" onClick={this.listView}>\n                List View\n              </Menu.Item>\n              <Menu.Item key=\"grid view\" onClick={this.gridView}>\n                Grid View\n              </Menu.Item>\n            </Menu.ItemGroup>\n          </SubMenu>\n          <Menu.Item key=\"about\" onClick={this.about}>\n            About\n          </Menu.Item>\n          <Menu.Item key=\"friends\" onClick={this.info}>\n            Friends 1,264\n          </Menu.Item>\n          <Menu.Item key=\"photos\" onClick={this.info}>\n            Photos\n            <Icon type=\"down\" />\n          </Menu.Item>\n          <Menu.Item key=\"archive\" onClick={this.info}>\n            <Icon type=\"lock\" />\n            Archive\n          </Menu.Item>\n          <Menu.Item key=\"more\" onClick={this.more}>\n            More\n            <Icon type=\"down\" />\n          </Menu.Item>\n        </Menu>\n        Clicked About: {this.state.count}\n        <div className=\"gutter-example\">\n          <Row>\n            {this.state.imageList.map((image, index) => (\n              <Col\n                className=\"gutter-row\"\n                span={this.state.spanValue}\n                key={index}>\n                <div className=\"gutter-box\">\n                  <img src={image.img} alt=\"\" />\n                </div>\n              </Col>\n            ))}\n          </Row>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.587c9317.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot from 2018-12-18 11-55-13.b9deea1e.png\";"],"sourceRoot":""}